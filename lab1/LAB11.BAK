trace
nowarnings
domains
	edg = symbol*
	edges = edg*
predicates
    edge(symbol, symbol)
    way(symbol, symbol)
    oneEdge(symbol, symbol, edg).
    getEdges(symbol, edges).
    removeEdge(edg, edges, edges).
    main.
    cycle(symbol,edges,edges, edg).
    clear(edges, edges).
    equil(edges, edges).
clauses
	
    edge(a, b).
    edge(b, c).
    edge(c, d).
    edge(d, a).

    way(A, B) :- edge(A, B);edge(B, A).
    oneEdge(A, B, [A, B]):-way(A, B).
    getEdges(_, L):- findall(Edg, oneEdge(_,_, Edg), L).
    removeEdge([A, B], [[A,B]|TIn], Out) :-!, 
    	removeEdge([A, B], TIn, Out).
    removeEdge([A, B], [[B, A]|TIn], Out) :-!,
    	removeEdge([A, B], TIn, Out).
    removeEdge(In, [HIn|TIn], [HOut|TOut]) :-!,
    	HOut = HIn,
    	 removeEdge(In, TIn, TOut), !.
    removeEdge([A, B], [], Res).
    

    clear(E, []).
    equil(L, L) :- not(L = L), write("not equil"),nl.
   
    cycle(A, CurEdges,_, [H|T]) :-
      way(A,B),
      removeEdge([A,B], CurEdges, Temp),
      equil(CurEdges, Temp), !,
      H=A, cycle(B, Temp,_, T), !.
      
    
    main() :- 
    	getEdges(a, L), write(L), readln(_), cycle(_, L, _, Res) , write(Res).
    